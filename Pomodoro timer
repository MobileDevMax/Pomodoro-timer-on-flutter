import 'package:flutter/material.dart';
import 'dart:async';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pomodoro timer',
      theme: ThemeData(
        primarySwatch: Colors.red, 
      ),
      home: PomodoroTimer(),
    );
  }
}

class PomodoroTimer extends StatefulWidget {
  @override
  _PomodoroTimerState createState() => _PomodoroTimerState();
}

class _PomodoroTimerState extends State<PomodoroTimer> {
  static const int _workDuration = 25 * 60; 
  static const int _breakDuration = 5 * 60; 
  late Timer _timer;
  int _remainingTime = _workDuration;
  bool _isWorking = true;

  void _startTimer() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (_remainingTime > 0) {
          _remainingTime--;
        } else {
          if (_isWorking) {
            _remainingTime = _breakDuration;
            _isWorking = false;
          } else {
            _remainingTime = _workDuration;
            _isWorking = true;
          }
        }
      });
    });
  }

  void _stopTimer() {
    _timer.cancel();
  }

  void _resetTimer() {
    _stopTimer();
    setState(() {
      _remainingTime = _isWorking ? _workDuration : _breakDuration;
    });
  }

  @override
  void dispose() {
    _stopTimer();
    super.dispose();
  }

  String _formatDuration(int seconds) {
    final minutes = (seconds ~/ 60).toString().padLeft(2, '0');
    final secs = (seconds % 60).toString().padLeft(2, '0');
    return '$minutes:$secs';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pomodoro timer'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              '${_isWorking ? 'Work' : 'Break'}:',
              style: TextStyle(fontSize: 32),
            ),
            SizedBox(height: 20),
            Text(
              _formatDuration(_remainingTime),
              style: TextStyle(fontSize: 48, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 40),
            ElevatedButton(
              onPressed: _startTimer,
              child: Text('Start timer'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopTimer,
              child: Text('Stop timer'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetTimer,
              child: Text('Reset timer'),
            ),
          ],
        ),
      ),
    );
  }
}
